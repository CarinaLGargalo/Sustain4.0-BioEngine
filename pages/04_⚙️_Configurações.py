import streamlit as st

# Configura√ß√£o da p√°gina (DEVE ser o primeiro comando do Streamlit)
st.set_page_config(
    page_title="Configura√ß√µes - Sustain 4.0",
    page_icon="‚öôÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Importar outras bibliotecas depois da configura√ß√£o da p√°gina
import yaml
from yaml.loader import SafeLoader
import pandas as pd
import json
import os
from pathlib import Path
import sys

# Background customizado com opacidade de 30%
page_bg__img = """
<style>
[data-testid="stAppViewContainer"] {
    background: linear-gradient(rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4)),
                url("https://images.unsplash.com/photo-1675130277336-23cb686f01c0?q=80&w=1374&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D");
    background-size: cover;
    background-attachment: fixed;
}

[data-testid="stHeader"] {
    background-color: rgba(0, 0, 0, 0);
}

/* Garantir que o conte√∫do aparece sobre o fundo */
[data-testid="stToolbar"] {
    z-index: 1;
}
</style>
"""
st.markdown(page_bg__img, unsafe_allow_html=True)

# Adicionar diret√≥rio pai ao path para importar fun√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils import save_user_data

# Verifica√ß√£o de autentica√ß√£o
if not st.session_state.get('authenticated', False):
    st.info("üîêPor favor, fa√ßa login na p√°gina principal.")
    st.stop()

# Importar fun√ß√µes adicionais
from utils import load_config, save_config

st.header("Configura√ß√µes")

# Carregar configura√ß√£o atual
config = load_config()

# Criar abas para organizar as configura√ß√µes
tab1, tab2, tab3, tab4 = st.tabs(["üîí Conta", "üìä Visualiza√ß√£o", "üîß Sistema", "üì± Notifica√ß√µes"])

with tab1:
    st.subheader("Configura√ß√µes de Conta")
    
    # Exibir informa√ß√µes do usu√°rio atual (se houver)
    if 'username' in st.session_state:
        st.info(f"Usu√°rio atual: {st.session_state['username']}")
        
        # Op√ß√£o para alterar senha
        with st.expander("Alterar senha"):
            current_password = st.text_input("Senha atual", type="password")
            new_password = st.text_input("Nova senha", type="password")
            confirm_password = st.text_input("Confirmar nova senha", type="password")
            
            if st.button("Atualizar senha"):
                if new_password != confirm_password:
                    st.error("As senhas n√£o correspondem.")
                elif len(new_password) < 6:
                    st.error("A senha deve ter pelo menos 6 caracteres.")
                else:
                    # Aqui voc√™ implementaria a l√≥gica para verificar a senha atual
                    # e atualizar para a nova senha no config
                    st.success("Senha alterada com sucesso!")

    # Se√ß√£o para gerenciar usu√°rios (somente para administradores)
    with st.expander("Gerenciar Usu√°rios (Admin)"):
        st.warning("Esta se√ß√£o est√° dispon√≠vel apenas para administradores.")
        # Aqui voc√™ poderia adicionar uma verifica√ß√£o se o usu√°rio √© admin
        # E ent√£o mostrar as op√ß√µes de gerenciamento de usu√°rios

with tab2:
    st.subheader("Configura√ß√µes de Visualiza√ß√£o")
    
    # Tema da interface
    theme_options = ["Claro", "Escuro", "Sistema"]
    selected_theme = st.selectbox(
        "Tema da interface", 
        options=theme_options,
        index=theme_options.index(config.get('theme', 'Sistema'))
    )
    
    # Visualiza√ß√£o de dados
    st.subheader("Gr√°ficos e Relat√≥rios")
    
    # Tipo de gr√°fico padr√£o
    chart_types = ["Barras", "Linhas", "Dispers√£o", "√Årea", "Pizza"]
    default_chart = st.selectbox(
        "Tipo de gr√°fico padr√£o", 
        options=chart_types,
        index=chart_types.index(config.get('default_chart_type', 'Barras'))
    )
    
    # Paleta de cores
    color_palettes = ["Viridis", "Magma", "Plasma", "Inferno", "Cividis", "Sustentabilidade"]
    default_palette = st.selectbox(
        "Paleta de cores para gr√°ficos", 
        options=color_palettes,
        index=color_palettes.index(config.get('color_palette', 'Sustentabilidade'))
    )
    
    # Densidade de dados
    data_density = st.slider(
        "Densidade de dados em gr√°ficos", 
        min_value=50, 
        max_value=1000, 
        value=config.get('data_density', 500),
        step=50,
        help="N√∫mero m√°ximo de pontos a exibir em gr√°ficos detalhados. Valores menores melhoram o desempenho."
    )

with tab3:
    st.subheader("Configura√ß√µes do Sistema")
    
    # Configura√ß√£o do cache
    cache_options = ["1 hora", "3 horas", "6 horas", "12 horas", "1 dia", "Sempre"]
    cache_setting = st.selectbox(
        "Dura√ß√£o do cache de dados", 
        options=cache_options,
        index=cache_options.index(config.get('cache_duration', '1 hora'))
    )
    
    # Unidades de medida
    units_system = st.radio(
        "Sistema de unidades",
        options=["M√©trico", "Imperial"],
        index=0 if config.get('units', 'M√©trico') == 'M√©trico' else 1
    )
    
    # Configura√ß√µes de backup
    st.subheader("Backup de Dados")
    backup_frequency = st.selectbox(
        "Frequ√™ncia de backup autom√°tico",
        options=["Desativado", "Di√°rio", "Semanal", "Mensal"],
        index=["Desativado", "Di√°rio", "Semanal", "Mensal"].index(config.get('backup_frequency', 'Semanal'))
    )
    
    backup_location = st.text_input(
        "Localiza√ß√£o de backup",
        value=config.get('backup_location', './backups'),
        help="Pasta onde os backups ser√£o armazenados"
    )
    
    if st.button("Fazer backup agora"):
        st.info("Iniciando backup manual...")
        # Aqui voc√™ implementaria a l√≥gica de backup
        st.success("Backup conclu√≠do com sucesso!")

with tab4:
    st.subheader("Configura√ß√µes de Notifica√ß√µes")
    
    # Ativar/desativar notifica√ß√µes
    notifications_enabled = st.toggle(
        "Ativar notifica√ß√µes",
        value=config.get('notifications_enabled', True)
    )
    
    if notifications_enabled:
        # Tipos de notifica√ß√µes
        notification_types = st.multiselect(
            "Tipos de notifica√ß√µes",
            options=["Alertas cr√≠ticos", "Atualiza√ß√µes de dados", "Relat√≥rios peri√≥dicos", "Novidades do sistema"],
            default=config.get('notification_types', ["Alertas cr√≠ticos"]),
        )
        
        # Email para notifica√ß√µes
        email_notifications = st.toggle(
            "Receber notifica√ß√µes por email",
            value=config.get('email_notifications', False)
        )
        
        if email_notifications:
            notification_email = st.text_input(
                "Email para notifica√ß√µes",
                value=config.get('notification_email', '')
            )
            
            frequency_options = ["Tempo real", "Resumo di√°rio", "Resumo semanal"]
            email_frequency = st.radio(
                "Frequ√™ncia de emails",
                options=frequency_options,
                index=frequency_options.index(config.get('email_frequency', 'Resumo di√°rio'))
            )

# Bot√£o para salvar todas as configura√ß√µes
if st.button("Salvar todas as configura√ß√µes", type="primary"):
    # Atualizar valores de configura√ß√£o
    # Tema
    config['theme'] = selected_theme
    st.session_state.theme = selected_theme
    
    # Visualiza√ß√£o
    config['default_chart_type'] = default_chart
    config['color_palette'] = default_palette
    config['data_density'] = data_density
    
    # Sistema
    config['cache_duration'] = cache_setting
    config['units'] = units_system
    config['backup_frequency'] = backup_frequency
    config['backup_location'] = backup_location
    
    # Notifica√ß√µes
    config['notifications_enabled'] = notifications_enabled
    st.session_state.notifications = notifications_enabled
    if notifications_enabled and 'notification_types' in locals():
        config['notification_types'] = notification_types
    if 'email_notifications' in locals():
        config['email_notifications'] = email_notifications
        if email_notifications and 'notification_email' in locals():
            config['notification_email'] = notification_email
        if email_notifications and 'email_frequency' in locals():
            config['email_frequency'] = email_frequency
    
    # Salvar no arquivo de configura√ß√£o global
    try:
        save_config(config)
    except Exception as e:
        st.error(f"Erro ao salvar configura√ß√µes: {e}")
        
    # Salvar as prefer√™ncias do usu√°rio em seu arquivo pr√≥prio
    if st.session_state.get('username'):
        username = st.session_state.username
        
        # Recuperar os projetos existentes (se houver)
        user_projects = st.session_state.user_projects.get(username, [])
        
        # Montar o objeto de dados do usu√°rio
        user_data = {
            'projects': user_projects,
            'preferences': {
                'theme': selected_theme,
                'notifications': notifications_enabled,
                'default_chart_type': default_chart,
                'color_palette': default_palette,
                'data_density': data_density,
                'units': units_system
            },
            'last_update': pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Salvar dados do usu√°rio
        try:
            save_user_data(username, user_data)
            st.success("Configura√ß√µes pessoais salvas com sucesso!")
        except Exception as e:
            st.error(f"Erro ao salvar configura√ß√µes pessoais: {e}")

# Op√ß√£o para restaurar padr√µes
if st.button("Restaurar configura√ß√µes padr√£o"):
    if st.checkbox("Confirmar restaura√ß√£o de configura√ß√µes padr√£o"):
        # Definir valores padr√£o
        default_config = {
            'theme': 'Sistema',
            'default_chart_type': 'Barras',
            'color_palette': 'Sustentabilidade',
            'data_density': 500,
            'cache_duration': '1 hora',
            'units': 'M√©trico',
            'backup_frequency': 'Semanal',
            'backup_location': './backups',
            'notifications_enabled': True,
            'notification_types': ["Alertas cr√≠ticos"],
            'email_notifications': False
        }
        
        # Manter credenciais e configura√ß√µes de cookie
        if 'credentials' in config:
            default_config['credentials'] = config['credentials']
        if 'cookie' in config:
            default_config['cookie'] = config['cookie']
        if 'preauthorized' in config:
            default_config['preauthorized'] = config['preauthorized']
        
        # Salvar
        try:
            save_config(default_config)
            st.experimental_rerun()  # Recarregar a p√°gina
        except Exception as e:
            st.error(f"Erro ao restaurar configura√ß√µes: {e}")
