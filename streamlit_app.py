import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from streamlit_option_menu import option_menu

# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide")
st.title('üåøSustain 4.0 - BioEngine')

# Inicializar session state para manter dados entre abas
if 'user_name' not in st.session_state:
    st.session_state.user_name = ""
if 'selected_analysis' not in st.session_state:
    st.session_state.selected_analysis = "An√°lise de Biodiversidade"
if 'data_uploaded' not in st.session_state:
    st.session_state.data_uploaded = False
if 'uploaded_data' not in st.session_state:
    st.session_state.uploaded_data = None
if 'model_params' not in st.session_state:
    st.session_state.model_params = {'n_estimators': 100, 'max_depth': 10}
if 'notifications' not in st.session_state:
    st.session_state.notifications = True
if 'theme' not in st.session_state:
    st.session_state.theme = "Claro"

# Menu de abas no topo
selected_tab = option_menu(
    menu_title=None,  # Deixa o t√≠tulo vazio para simular abas
    options=["Home", "An√°lise", "Configura√ß√µes"],  # Nomes das abas
    icons=["house", "bar-chart", "gear"],  # √çcones das abas
    menu_icon="cast",  # √çcone do menu (opcional)
    default_index=0,  # Aba padr√£o
    orientation="horizontal",  # Define a orienta√ß√£o como horizontal
)

# Conte√∫do de cada aba
if selected_tab == "Home":
    st.header("üè† Bem-vindo ao Sustain 4.0 - BioEngine!")
    
    # Se√ß√£o de informa√ß√µes do usu√°rio
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìù Informa√ß√µes do Usu√°rio")
        st.session_state.user_name = st.text_input(
            "Nome do usu√°rio:", 
            value=st.session_state.user_name,
            placeholder="Digite seu nome"
        )
        
        user_role = st.selectbox(
            "Fun√ß√£o:",
            ["Pesquisador", "Analista", "Gestor Ambiental", "Estudante"],
            index=0 if 'user_role' not in st.session_state else ["Pesquisador", "Analista", "Gestor Ambiental", "Estudante"].index(st.session_state.get('user_role', 'Pesquisador'))
        )
        st.session_state.user_role = user_role
        
        user_organization = st.text_input(
            "Organiza√ß√£o:",
            value=st.session_state.get('user_organization', ''),
            placeholder="Digite sua organiza√ß√£o"
        )
        st.session_state.user_organization = user_organization
    
    with col2:
        st.subheader("üéØ Projeto Atual")
        project_name = st.text_input(
            "Nome do Projeto:",
            value=st.session_state.get('project_name', ''),
            placeholder="Nome do seu projeto de sustentabilidade"
        )
        st.session_state.project_name = project_name
        
        project_location = st.selectbox(
            "Localiza√ß√£o do Projeto:",
            ["Amaz√¥nia", "Mata Atl√¢ntica", "Cerrado", "Caatinga", "Pantanal", "Pampa", "Outro"],
            index=0 if 'project_location' not in st.session_state else ["Amaz√¥nia", "Mata Atl√¢ntica", "Cerrado", "Caatinga", "Pantanal", "Pampa", "Outro"].index(st.session_state.get('project_location', 'Amaz√¥nia'))
        )
        st.session_state.project_location = project_location
        
        project_duration = st.slider(
            "Dura√ß√£o do Projeto (meses):",
            min_value=1, max_value=60, 
            value=st.session_state.get('project_duration', 12)
        )
        st.session_state.project_duration = project_duration
    
    # Resumo das informa√ß√µes
    if st.session_state.user_name:
        st.success(f"üëã Ol√°, {st.session_state.user_name}! Suas informa√ß√µes foram salvas.")
        
        with st.expander("üìä Resumo das Informa√ß√µes Salvas"):
            st.write(f"**Nome:** {st.session_state.user_name}")
            st.write(f"**Fun√ß√£o:** {st.session_state.user_role}")
            st.write(f"**Organiza√ß√£o:** {st.session_state.user_organization}")
            st.write(f"**Projeto:** {st.session_state.project_name}")
            st.write(f"**Localiza√ß√£o:** {st.session_state.project_location}")
            st.write(f"**Dura√ß√£o:** {st.session_state.project_duration} meses")

elif selected_tab == "An√°lise":
    st.header("üìä P√°gina de An√°lise")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üîß Configura√ß√µes de An√°lise")
        
        # Tipo de an√°lise
        analysis_type = st.selectbox(
            "Tipo de An√°lise:",
            ["An√°lise de Biodiversidade", "An√°lise de Carbono", "An√°lise de √Ågua", "An√°lise de Solo"],
            index=["An√°lise de Biodiversidade", "An√°lise de Carbono", "An√°lise de √Ågua", "An√°lise de Solo"].index(st.session_state.selected_analysis)
        )
        st.session_state.selected_analysis = analysis_type
        
        # Upload de dados
        uploaded_file = st.file_uploader(
            "Upload de dados (CSV):",
            type=['csv'],
            help="Fa√ßa upload de um arquivo CSV com seus dados"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                st.session_state.uploaded_data = df
                st.session_state.data_uploaded = True
                st.success(f"‚úÖ Arquivo carregado! {len(df)} linhas e {len(df.columns)} colunas")
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar arquivo: {e}")
        
        # Par√¢metros do modelo
        st.subheader("‚öôÔ∏è Par√¢metros do Modelo")
        n_estimators = st.slider(
            "N√∫mero de Estimadores:",
            min_value=10, max_value=500,
            value=st.session_state.model_params['n_estimators']
        )
        
        max_depth = st.slider(
            "Profundidade M√°xima:",
            min_value=1, max_value=50,
            value=st.session_state.model_params['max_depth']
        )
        
        st.session_state.model_params = {
            'n_estimators': n_estimators,
            'max_depth': max_depth
        }
        
        # Bot√£o para executar an√°lise
        if st.button("üöÄ Executar An√°lise", type="primary"):
            if st.session_state.data_uploaded:
                st.session_state.analysis_executed = True
                st.success("‚úÖ An√°lise executada com sucesso!")
            else:
                st.warning("‚ö†Ô∏è Por favor, fa√ßa upload de dados primeiro!")
    
    with col2:
        st.subheader("üìà Resultados da An√°lise")
        
        if st.session_state.get('analysis_executed', False) and st.session_state.data_uploaded:
            # Simular resultados da an√°lise
            st.write(f"**Tipo de An√°lise:** {st.session_state.selected_analysis}")
            st.write(f"**Projeto:** {st.session_state.get('project_name', 'N√£o informado')}")
            st.write(f"**Localiza√ß√£o:** {st.session_state.get('project_location', 'N√£o informado')}")
            
            # Gr√°fico simulado
            chart_data = pd.DataFrame(
                np.random.randn(20, 3),
                columns=['Vari√°vel A', 'Vari√°vel B', 'Vari√°vel C']
            )
            st.line_chart(chart_data)
            
            # M√©tricas simuladas
            col_metric1, col_metric2, col_metric3 = st.columns(3)
            with col_metric1:
                st.metric("Biodiversidade", "85%", "2.1%")
            with col_metric2:
                st.metric("Carbono (t)", "1,234", "-12")
            with col_metric3:
                st.metric("Qualidade", "92", "5.2")
                
        elif st.session_state.data_uploaded:
            st.info("üìã Dados carregados. Clique em 'Executar An√°lise' para ver os resultados.")
            
            # Preview dos dados
            if st.session_state.uploaded_data is not None:
                st.write("**Preview dos dados:**")
                st.dataframe(st.session_state.uploaded_data.head())
        else:
            st.info("üì§ Fa√ßa upload de dados para come√ßar a an√°lise.")

elif selected_tab == "Configura√ß√µes":
    st.header("‚öôÔ∏è Configura√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üé® Prefer√™ncias de Interface")
        
        # Tema
        theme = st.selectbox(
            "Tema:",
            ["Claro", "Escuro", "Autom√°tico"],
            index=["Claro", "Escuro", "Autom√°tico"].index(st.session_state.theme)
        )
        st.session_state.theme = theme
        
        # Notifica√ß√µes
        notifications = st.checkbox(
            "Receber notifica√ß√µes",
            value=st.session_state.notifications
        )
        st.session_state.notifications = notifications
        
        # Idioma
        language = st.selectbox(
            "Idioma:",
            ["Portugu√™s", "English", "Espa√±ol"],
            index=0 if 'language' not in st.session_state else ["Portugu√™s", "English", "Espa√±ol"].index(st.session_state.get('language', 'Portugu√™s'))
        )
        st.session_state.language = language
        
        # Salvar configura√ß√µes autom√°ticas
        auto_save = st.checkbox(
            "Salvamento autom√°tico",
            value=st.session_state.get('auto_save', True)
        )
        st.session_state.auto_save = auto_save
    
    with col2:
        st.subheader("üìä Configura√ß√µes de An√°lise Padr√£o")
        
        # Configura√ß√µes de an√°lise padr√£o
        default_analysis = st.selectbox(
            "An√°lise padr√£o:",
            ["An√°lise de Biodiversidade", "An√°lise de Carbono", "An√°lise de √Ågua", "An√°lise de Solo"],
            index=["An√°lise de Biodiversidade", "An√°lise de Carbono", "An√°lise de √Ågua", "An√°lise de Solo"].index(st.session_state.selected_analysis)
        )
        st.session_state.default_analysis = default_analysis
        
        # Configura√ß√µes de export
        export_format = st.multiselect(
            "Formatos de export:",
            ["PDF", "CSV", "Excel", "JSON"],
            default=st.session_state.get('export_formats', ["PDF", "CSV"])
        )
        st.session_state.export_formats = export_format
        
        # Configura√ß√µes de email
        email_reports = st.checkbox(
            "Receber relat√≥rios por email",
            value=st.session_state.get('email_reports', False)
        )
        st.session_state.email_reports = email_reports
        
        if email_reports:
            email_address = st.text_input(
                "Email para relat√≥rios:",
                value=st.session_state.get('email_address', ''),
                placeholder="seu.email@exemplo.com"
            )
            st.session_state.email_address = email_address
    
    st.subheader("üíæ Gerenciamento de Dados")
    
    col3, col4, col5 = st.columns(3)
    
    with col3:
        if st.button("üóëÔ∏è Limpar Cache", help="Remove dados tempor√°rios"):
            # Manter apenas configura√ß√µes essenciais
            keys_to_keep = ['user_name', 'theme', 'notifications', 'language']
            keys_to_remove = [key for key in st.session_state.keys() if key not in keys_to_keep]
            for key in keys_to_remove:
                del st.session_state[key]
            st.success("‚úÖ Cache limpo!")
            st.rerun()
    
    with col4:
        if st.button("üì§ Exportar Configura√ß√µes"):
            config_data = {key: value for key, value in st.session_state.items()}
            st.download_button(
                label="üíæ Download Configura√ß√µes",
                data=str(config_data),
                file_name="config_sustain40.txt",
                mime="text/plain"
            )
    
    with col5:
        if st.button("üîÑ Resetar Tudo"):
            st.session_state.clear()
            st.success("‚úÖ Todas as configura√ß√µes foram resetadas!")
            st.rerun()
    
    # Mostrar estado atual
    with st.expander("üîç Estado Atual do Sistema"):
        st.json(dict(st.session_state))

# Se√ß√£o de resumo global (vis√≠vel em todas as abas)
st.divider()
st.subheader("üåç Resumo Global do Projeto")

if st.session_state.get('user_name'):
    col_global1, col_global2, col_global3 = st.columns(3)
    
    with col_global1:
        st.info(f"üë§ **Usu√°rio:** {st.session_state.user_name}")
        if st.session_state.get('project_name'):
            st.info(f"üìã **Projeto:** {st.session_state.project_name}")
    
    with col_global2:
        if st.session_state.get('selected_analysis'):
            st.info(f"üî¨ **An√°lise Ativa:** {st.session_state.selected_analysis}")
        if st.session_state.data_uploaded:
            st.success("üìä **Dados:** Carregados")
        else:
            st.warning("üìä **Dados:** N√£o carregados")
    
    with col_global3:
        if st.session_state.get('theme'):
            st.info(f"üé® **Tema:** {st.session_state.theme}")
        if st.session_state.get('notifications'):
            st.success("üîî **Notifica√ß√µes:** Ativas")
        else:
            st.info("üîï **Notifica√ß√µes:** Inativas")
else:
    st.warning("üëã Bem-vindo! V√° para a aba 'Home' para configurar suas informa√ß√µes.")

